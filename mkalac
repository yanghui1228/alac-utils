#!/bin/bash

#
# Cuesheet encoding auto-fix settings.
#
# cue2alac will try to automatically fix possible wrong (non UTF-8) encoding with 'enca' program (if it is installed).
# Please set your language preference for enca here.
#
ENCA_LANGUAGE='zh'

usage()
{
	echo "Usage:"
	echo "mkalac  <cuefile>  # with auto encoding"
	echo "mkalac  <cuefile> <-e> <encoding> # with encoding in the option -e, use 'iconv -l' to view the supported encoding"
	echo "mkalac  <wavfile>  # with auto encoding"
	echo "mkalac  <wavfile> <-e> <encoding> # with encoding in the option -e, use 'iconv -l' to view the supported encoding"
	echo "mkalac  <flacfile>"
	echo "mkalac  <directory>  # with auto encoding"
	echo "mkalac  <directory> <-e> <encoding> # with encoding in the option -e, use 'iconv -l' to view the supported encoding"

}

program_exists ()
{
	type "$1" &> /dev/null ;
}

metadata()
{
	local cue_file="$1"
	local field="$2"
	echo `cueprint -n $track -t "$field" "$cue_file"`
}

convert()
{
	local cue_file="$1"
	local track=$2
	local infile="$3"
	local dir="$4"
	local date="$5"
	local genre="$6"

	local title="$(metadata "$cue_file" "%t")"
	local album_artist="$(metadata "$cue_file" "%P")"
	local artist="$(metadata "$cue_file" "%p")"

	local outfile=`echo "$track - $title.m4a" | sed 's#\/#-#g'`
	outfile="$dir/$outfile"

	if [ -z "$artist" ] && [ -n "$album_artist" ]; then
		artist="$album_artist"
		album_artist=""
	fi

	echo "Converting $infile to $outfile ..."

	ffmpeg -v error -i "$infile" -acodec alac \
		-metadata title="$title" \
		-metadata artist="$artist" \
		-metadata album_artist="$album_artist" \
		-metadata album="$(metadata "$cue_file" "%T")" \
		-metadata composer="$(metadata "$cue_file" "%c")" \
		-metadata date="$date" \
		-metadata track="$track" \
		-metadata genre="$genre" \
		"$outfile"
}


convertflac()
{
	local infile="$1"
	local outfile="${infile/%flac/m4a}"
	local album_artist=$(metaflac --show-tag='ALBUM ARTIST' "$infile" | sed 's/ALBUM ARTIST=//g')
	echo "Converting $infile to $outfile ..."
	ffmpeg -i "$infile" -map 0:0 -acodec alac -metadata album_artist="$album_artist" "$outfile"
	echo "Done!"
}

convertwav()
{
	local infile="$1"
	local parameter="$2"
	local encoding="$3"
	local outfile="${infile/%wav/m4a}"
	mkdir -p tmp

	#
	# Try to automatically fix possible non-UTF-8 encoding in cuefile
	#
	local meta_file_temp="tmp/$infile"
	meta_file_temp="${meta_file_temp/%wav/txt}"
	ffmpeg -i "$infile"  -f ffmetadata "$meta_file_temp"

	if program_exists iconv; then
		if [ -z "$3" ]; then
			echo "Trying to auto-convert $meta_file to UTF-8 ..."
			encoding=`file --mime "$meta_file_temp" | sed 's/^[^:]*: .*set=\(.*\)/\1/'`
		else
			echo "Trying to convert $meta_file_temp from $encoding to UTF-8 ..."
		fi
		local meta_file="${meta_file_temp/%txt/utf8.txt}"
		iconv -f "$encoding" -t UTF-8 "$meta_file_temp" > "$meta_file"
	fi
	echo "Converting $infile to $outfile ..."
	ffmpeg -i "$infile" -i "$meta_file" -map_metadata 1 -acodec alac "$outfile"
	#
	# Delete temp stuff
	#

	echo "Removing temporary files ..."
	rm -rf tmp

	echo "Done!"
}


convertcue()
{
	local cue_file="$1"
	local parameter="$2"
	local encoding="$3"
	
	mkdir -p tmp

	#
	# Try to automatically fix possible non-UTF-8 encoding in cuefile
	#
	if program_exists enca && [ -n "$ENCA_LANGUAGE" ] ; then
		echo "Trying to auto-convert $cue_file to UTF-8 ..."
		enca -L "$ENCA_LANGUAGE" -x UTF-8 < "$cue_file" > "tmp/$cue_file"
	elif program_exists iconv; then
		#local encoding=`file --mime "$cue_file" | sed 's/^[^:]*: .*set=\(.*\)/\1/'`
		if [ -z "$3" ]; then
			echo "Trying to auto-convert $cue_file to UTF-8 ..."
			encoding=`file --mime "$cue_file" | sed 's/^[^:]*: .*set=\(.*\)/\1/'`
		else
			echo "Trying to convert $cue_file from $encoding to UTF-8 ..."
		fi
		iconv -f "$encoding" -t UTF-8 "$cue_file" > "tmp/$cue_file"
	else
		cp -f "$cue_file" "tmp/$cue_file"
	fi
	
	cue_file="tmp/$cue_file"
	if program_exists dos2unix; then
		dos2unix "tmp/$cue_file"
	fi

	#
	# Get some metadata from cuefile
	#

	local music_file=`sed -n 's#^FILE "\(.*\)".*$#\1#p' "$cue_file"`
	local date=`sed -n -e 's#^REM DATE \(.*\)$#\1#p' "$cue_file"`
	date=`echo "$date" | sed 's#\"##g'`
	local genre=`sed -n -e 's#^REM GENRE \(.*\)#\1#p' "$cue_file"`
	genre=`echo $genre | sed 's#\"##g'`

	#
	# If source music file is APE, convert first it to FLAC, because shnsplit can't split APE
	#

	ext=`echo "${music_file: -4}" | tr "[:upper:]" "[:lower:]"`
	if [ "$ext" == ".ape" ]; then
		local music_file_tmp="${music_file/%ape/flac}"
		echo "Converting $music_file to $music_file_tmp ..."
		ffmpeg -v warning -i "$music_file" "tmp/$music_file_tmp"
		music_file="tmp/$music_file_tmp"
	fi
	if [ "$ext" == ".wav" ]; then
		local music_file_tmp="${music_file/%wav/flac}"
		echo "Converting $music_file to $music_file_tmp ..."
		ffmpeg -v warning -i "$music_file" "tmp/$music_file_tmp"
		music_file="tmp/$music_file_tmp"
	fi


	#
	# Perform splitting to separate FLAC files
	#

	shnsplit -d tmp -f "$cue_file" -o flac -t '%n' "$music_file"

	if [ -n "tmp/$music_file_tmp" ]; then
		echo "Removing temporary file $music_file_tmp ..."
		rm -rf "tmp/$music_file_tmp"
	fi

	rm -f tmp/00.flac

	#
	# Convert each FLAC file to ALAC + tag them
	#

	for file in tmp/*.flac; do
		local track="${file/.flac/}"
		track="${track/tmp\//}"
		convert "$cue_file" $track "$file" "tmp" "$date" "$genre"
	done

	echo "Moving files ..."
	mv tmp/*.m4a .

	#
	# Delete temp stuff
	#

	echo "Removing temporary files ..."
	rm -rf tmp

	echo "Done!"
}


main()
{
	set -e

	if ! program_exists ffmpeg; then
		echo "Please install ffmpeg"
		exit 1
	fi

	if ! program_exists metaflac; then
		echo "Please install flac"
		exit 1
	fi

	if ! program_exists shnsplit; then
		echo "Please install shntool"
		exit 1
	fi

	if ! program_exists cueprint; then
		echo "Please install cuetools"
		exit 1
	fi

	if [ -z "$1" ]; then
		usage
		exit
	fi

	if [ -n "$2" ]  && [ -z "$3" ]; then
		usage
		exit
	fi

	VAR="$1"
	echo "Working Directory: ${DIR}"
	if [ -f "$1" ]; then
		DIR="$(dirname "$VAR")"
		file_name=${VAR##*/}
	else
		DIR="$1"
	fi

	# check input parameter if the file name is passed or it's only the directory
	# the Priority is to convert the .cue sheet first. The other files will be skipped if .cue sheet existing.
	# If no .cue sheet found, all the other types of files will be converted.
	# file -> check file extension and convert.
	# directory -> convert all the cue and flac files under the directory
	cd "$DIR"
	if [ -f "$1" ]; then
		# The procedure to conver the files
		echo "File_Name        : $file_name"
		ext=`echo "${file_name: -4}" | tr "[:upper:]" "[:lower:]"`
		if [ "$ext" == ".cue" ]; then
			convertcue "$file_name" "$2" "$3"
		fi

		if [ "$ext" == ".wav" ]; then
			convertwav "$file_name" "$2" "$3"
		fi

		ext=`echo "${file_name: -5}" | tr "[:upper:]" "[:lower:]"`
		if [ "$ext" == ".flac" ]; then
			convertflac "$file_name"
		fi

	else
		echo "Converting all the files under the directory"
		for file in *.cue; do
			if [ "$file" == "*.cue" ]; then
				for file in *.flac; do
					if [ "$file" != "*.flac" ]; then
						convertflac "$file"
					fi
				done
				for file in *.wav; do
					if [ "$file" != "*.wav" ]; then
						convertwav "$file" "$2" "$3"
					fi
				done
			else
				convertcue "$file" "$2" "$3"
				echo "Other files will be skipped because the cue file existing!"
				echo "Please delete the cue file if you want to convert the other files, "
				echo "or use mkalac to convert the other files seperately!"
			fi
		done
	fi
	exit
}

main "$@"
